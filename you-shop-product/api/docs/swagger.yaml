definitions:
  entity.ProductStatus:
    enum:
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Active
    - Inactive
  error.ProductError:
    type: object
  error.ValidationError:
    type: object
  model.ApiResponse:
    properties:
      code:
        type: integer
      data: {}
      is_success:
        type: boolean
      message:
        type: string
    type: object
  product.UpdateProduct:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      status:
        $ref: '#/definitions/entity.ProductStatus'
      userManual:
        type: string
    type: object
info:
  contact: {}
paths:
  /products:
    get:
      parameters:
      - description: page number. Default is 1
        format: int
        in: query
        name: page
        type: integer
      - description: page_size number. Default is 10
        format: int
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: page or page_size is not a positive number
          schema:
            allOf:
            - $ref: '#/definitions/model.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/error.ValidationError'
              type: object
      summary: Get products data
      tags:
      - products
    post:
      parameters:
      - description: name of product
        in: formData
        name: name
        required: true
        type: string
      - description: sku of product
        in: formData
        name: sku
        required: true
        type: string
      - description: user manual of product
        in: formData
        name: user_manual
        required: true
        type: string
      - description: images of product. Max is 10 images
        in: formData
        name: product_images
        type: file
      - description: thumbnail of product
        in: formData
        name: thumbnail
        required: true
        type: file
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: /api/v1/products/ddb1fdef-2ffb-44a5-a833-fab7b4d60355
              type: string
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/model.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/error.ValidationError'
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/model.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/error.ValidationError'
              type: object
      summary: Add product
      tags:
      - products
  /products/{id}:
    get:
      parameters:
      - description: 'product id in uuid format. Eg: ddb1fdef-2ffb-44a5-a833-fab7b4d60355'
        in: path
        name: page
        required: true
        type: string
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/model.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/error.ProductError'
              type: object
      summary: Get product by id
      tags:
      - products
    put:
      consumes:
      - application/json
      parameters:
      - description: 'product id, Eg: ddb1fdef-2ffb-44a5-a833-fab7b4d60355 '
        in: path
        name: id
        required: true
        type: string
      - description: product update body
        in: body
        name: updateProduct
        required: true
        schema:
          $ref: '#/definitions/product.UpdateProduct'
      responses:
        "400":
          description: Cannot parse Id
          schema:
            allOf:
            - $ref: '#/definitions/model.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/error.ValidationError'
              type: object
        "500":
          description: Cannot parse request body
          schema:
            allOf:
            - $ref: '#/definitions/model.ApiResponse'
            - properties:
                data:
                  $ref: '#/definitions/error.ValidationError'
              type: object
      summary: Update product
      tags:
      - products
swagger: "2.0"
